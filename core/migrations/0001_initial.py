# Generated by Django 5.2.7 on 2025-10-24 15:20

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(choices=[('consistency', 'Constance'), ('reflective', 'Reflexif'), ('emotional_balance', 'Equilibre Emotionnel'), ('memory_keeper', 'Gardien de Memoires'), ('storyteller', 'Conteur'), ('explorer', 'Explorateur')], max_length=50, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='trophy', max_length=10)),
                ('requirement_value', models.IntegerField(help_text='Valeur requise pour debloquer')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar_url', models.URLField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='core_users', related_query_name='core_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_users', related_query_name='core_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='APIIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('kind', models.CharField(blank=True, max_length=100)),
                ('config', models.JSONField(blank=True, default=dict)),
                ('enabled', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='integrations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EntreeJournal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=200)),
                ('contenu_texte', models.TextField()),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entrees_journal', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Journal Entry',
                'verbose_name_plural': 'Journal Entries',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=400)),
                ('body', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('public', models.BooleanField(default=False)),
                ('source', models.CharField(blank=True, max_length=200, null=True)),
                ('embedding_id', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='attachments/')),
                ('mime', models.CharField(blank=True, max_length=100)),
                ('title', models.CharField(blank=True, max_length=250)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='core.note')),
            ],
        ),
        migrations.CreateModel(
            name='AITask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('embed', 'Embedding'), ('transcribe', 'Transcription'), ('summarize', 'Summarize'), ('ocr', 'OCR')], max_length=50)),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('running', 'Running'), ('done', 'Done'), ('error', 'Error')], default='queued', max_length=30)),
                ('result', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('attachment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.attachment')),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ai_tasks', to='core.note')),
            ],
        ),
        migrations.CreateModel(
            name='Souvenir',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('titre', models.CharField(help_text='Memory title', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the memory')),
                ('date_evenement', models.DateField(help_text='Date of the event')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='souvenirs/photos/%Y/%m/')),
                ('video', models.FileField(blank=True, null=True, upload_to='souvenirs/videos/%Y/%m/')),
                ('emotion', models.CharField(choices=[('joy', 'Joy'), ('sadness', 'Sadness'), ('nostalgia', 'Nostalgia'), ('gratitude', 'Gratitude'), ('excitement', 'Excitement'), ('peace', 'Peace'), ('love', 'Love'), ('surprise', 'Surprise'), ('neutral', 'Neutral')], default='neutral', help_text='Primary emotion', max_length=50)),
                ('theme', models.CharField(choices=[('family', 'Family'), ('travel', 'Travel'), ('work', 'Work'), ('friends', 'Friends'), ('achievement', 'Achievement'), ('celebration', 'Celebration'), ('nature', 'Nature'), ('learning', 'Learning'), ('other', 'Other')], default='other', help_text='Memory theme', max_length=50)),
                ('lieu', models.CharField(blank=True, default='', help_text='Location of the memory', max_length=200)),
                ('personnes_presentes', models.CharField(blank=True, default='', help_text='People present (comma-separated)', max_length=500)),
                ('is_favorite', models.BooleanField(default=False, help_text='Mark as favorite')),
                ('is_public', models.BooleanField(default=False, help_text='Make publicly visible')),
                ('ai_summary', models.TextField(blank=True, default='', help_text='AI-generated summary')),
                ('ai_emotion_detected', models.CharField(blank=True, default='', help_text='AI-detected emotion', max_length=50)),
                ('ai_tags', models.JSONField(blank=True, default=list, help_text='AI-generated tags')),
                ('ai_analyzed', models.BooleanField(default=False, help_text='Has been analyzed by AI')),
                ('ai_analysis_date', models.DateTimeField(blank=True, help_text='Date of AI analysis', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='souvenirs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Memory',
                'verbose_name_plural': 'Memories',
                'ordering': ['-date_evenement'],
            },
        ),
        migrations.CreateModel(
            name='PartageSouvenir',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_visibilite', models.CharField(choices=[('private_link', 'Private Link'), ('friends', 'Friends Only'), ('public', 'Public')], default='private_link', max_length=50)),
                ('lien_partage', models.UUIDField(blank=True, editable=False, null=True, unique=True)),
                ('code_acces', models.CharField(blank=True, default='', help_text='Optional access code', max_length=20)),
                ('date_expiration', models.DateField(blank=True, help_text='Link expiration date', null=True)),
                ('message_partage', models.TextField(blank=True, default='', help_text='Accompanying message')),
                ('vues_count', models.IntegerField(default=0)),
                ('likes_count', models.IntegerField(default=0)),
                ('autoriser_commentaires', models.BooleanField(default=True)),
                ('autoriser_reactions', models.BooleanField(default=True)),
                ('masquer_infos_perso', models.BooleanField(default=False)),
                ('date_partage', models.DateTimeField(auto_now_add=True)),
                ('souvenir', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partages', to='core.souvenir')),
            ],
            options={
                'verbose_name': 'Memory Share',
                'verbose_name_plural': 'Memory Shares',
            },
        ),
        migrations.CreateModel(
            name='ExportPDF',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre_export', models.CharField(max_length=200)),
                ('inclure_photos', models.BooleanField(default=True)),
                ('style_template', models.CharField(default='modern', help_text='PDF style template', max_length=50)),
                ('fichier_pdf', models.FileField(blank=True, upload_to='exports/pdf/')),
                ('nombre_pages', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('ready', 'Ready'), ('error', 'Error')], default='pending', max_length=20)),
                ('date_export', models.DateTimeField(auto_now_add=True)),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exports_pdf', to=settings.AUTH_USER_MODEL)),
                ('souvenirs', models.ManyToManyField(related_name='exports', to='core.souvenir')),
            ],
            options={
                'verbose_name': 'PDF Export',
                'verbose_name_plural': 'PDF Exports',
                'ordering': ['-date_export'],
            },
        ),
        migrations.CreateModel(
            name='CapsuleTemporelle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_verrouillage', models.DateTimeField(auto_now_add=True)),
                ('date_ouverture', models.DateField(help_text='Date when capsule unlocks')),
                ('message_futur', models.TextField(help_text='Message to your future self')),
                ('emotion_predite_par_ia', models.CharField(blank=True, default='', help_text='AI-predicted future emotion', max_length=50)),
                ('is_opened', models.BooleanField(default=False)),
                ('date_ouverture_reelle', models.DateTimeField(blank=True, help_text='Actual opening date', null=True)),
                ('reflexion_ouverture', models.TextField(blank=True, default='', help_text='Reflection upon opening')),
                ('emotion_reelle', models.CharField(blank=True, default='', help_text='Actual emotion upon opening', max_length=50)),
                ('souvenir', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='capsule', to='core.souvenir')),
            ],
            options={
                'verbose_name': 'Time Capsule',
                'verbose_name_plural': 'Time Capsules',
                'ordering': ['date_ouverture'],
            },
        ),
        migrations.CreateModel(
            name='AnalyseIASouvenir',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resume_genere', models.TextField(blank=True, default='', help_text='AI-generated summary')),
                ('mots_cles', models.JSONField(default=list, help_text='Extracted keywords')),
                ('emotion_texte', models.CharField(blank=True, default='', help_text='Emotion from text', max_length=50)),
                ('score_emotion_texte', models.FloatField(default=0.0, help_text='Emotion confidence score (0-1)')),
                ('objets_detectes', models.JSONField(default=list, help_text='Detected objects in image')),
                ('lieu_detecte', models.CharField(blank=True, default='', help_text='Detected location', max_length=200)),
                ('personnes_detectees', models.IntegerField(default=0, help_text='Number of faces detected')),
                ('emotion_image', models.CharField(blank=True, default='', help_text='Emotion from image', max_length=50)),
                ('couleurs_dominantes', models.JSONField(default=list, help_text='Dominant colors (hex codes)')),
                ('date_analyse', models.DateTimeField(auto_now_add=True)),
                ('modele_utilise', models.CharField(default='gpt-4', help_text='AI model used', max_length=100)),
                ('confiance_globale', models.FloatField(default=0.0, help_text='Overall confidence score (0-1)')),
                ('souvenir', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analyse_ia', to='core.souvenir')),
            ],
            options={
                'verbose_name': 'AI Analysis',
                'verbose_name_plural': 'AI Analyses',
            },
        ),
        migrations.CreateModel(
            name='AlbumSouvenir',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(help_text='Album title', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Album description')),
                ('is_auto_generated', models.BooleanField(default=False, help_text='Generated by AI')),
                ('theme_auto', models.CharField(blank=True, default='', help_text='Auto-detected theme', max_length=100)),
                ('couverture_generee', models.ImageField(blank=True, help_text='Auto-generated cover', upload_to='albums/')),
                ('couleur_theme', models.CharField(default='#3498db', help_text='Theme color (hex)', max_length=7)),
                ('is_public', models.BooleanField(default=False)),
                ('ordre_affichage', models.IntegerField(default=0, help_text='Display order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='albums', to=settings.AUTH_USER_MODEL)),
                ('souvenirs', models.ManyToManyField(blank=True, related_name='albums', to='core.souvenir')),
            ],
            options={
                'verbose_name': 'Memory Album',
                'verbose_name_plural': 'Memory Albums',
                'ordering': ['ordre_affichage', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SouvenirEntree',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_association', models.DateTimeField(auto_now_add=True)),
                ('entree_journal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='souvenirs_lies', to='core.entreejournal')),
                ('souvenir', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entrees_liees', to='core.souvenir')),
            ],
            options={
                'verbose_name': 'Memory-Journal Link',
                'verbose_name_plural': 'Memory-Journal Links',
            },
        ),
        migrations.CreateModel(
            name='SuiviMotivationnel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nb_souvenirs_ajoutes', models.IntegerField(default=0)),
                ('nb_entrees_journal', models.IntegerField(default=0)),
                ('total_mots_ecrits', models.IntegerField(default=0)),
                ('souvenirs_partages', models.IntegerField(default=0)),
                ('exports_realises', models.IntegerField(default=0)),
                ('jours_consecutifs', models.IntegerField(default=0, help_text='Current streak')),
                ('meilleure_serie', models.IntegerField(default=0, help_text='Best streak')),
                ('derniere_activite', models.DateTimeField(blank=True, null=True)),
                ('dernier_souvenir_ajoute', models.DateTimeField(blank=True, null=True)),
                ('derniere_entree_journal', models.DateTimeField(blank=True, null=True)),
                ('niveau_motivation', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], default='medium', max_length=20)),
                ('messages_motivationnels', models.JSONField(default=list, help_text='Motivational messages shown')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('utilisateur', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='suivi_motivationnel', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Motivational Tracking',
                'verbose_name_plural': 'Motivational Tracking',
            },
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('content', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('progress', models.IntegerField(default=0, help_text='Progression actuelle vers le badge')),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.badge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-earned_at'],
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('reference', 'Reference'), ('derived', 'Derived'), ('quote', 'Quote')], default='reference', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dst', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_links', to='core.note')),
                ('src', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_links', to='core.note')),
            ],
            options={
                'unique_together': {('src', 'dst', 'kind')},
            },
        ),
        migrations.AddIndex(
            model_name='souvenir',
            index=models.Index(fields=['-date_evenement'], name='core_souven_date_ev_5cb0ff_idx'),
        ),
        migrations.AddIndex(
            model_name='souvenir',
            index=models.Index(fields=['utilisateur', '-created_at'], name='core_souven_utilisa_296cab_idx'),
        ),
        migrations.AddIndex(
            model_name='souvenir',
            index=models.Index(fields=['is_favorite'], name='core_souven_is_favo_9c194d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='souvenirentree',
            unique_together={('souvenir', 'entree_journal')},
        ),
        migrations.AlterUniqueTogether(
            name='userbadge',
            unique_together={('user', 'badge')},
        ),
    ]
